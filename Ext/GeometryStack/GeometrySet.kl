/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Geometry;

object GeometrySet {
  Geometry geometries[];

  UInt32 attributeGenerations[String];

  ///Container for holding various user data, such as the Skeleton.
  Object metaData[String];
  UInt32 version;
};

/// returns the size of the contained value array
inline Size GeometrySet.size() {
  return this.geometries.size();
}

/// resizes the contained value array
inline GeometrySet.resize!(Size newSize) {
  this.geometries.resize(newSize);
  this.version++;
}

/// returns a geometry the by index
inline Geometry GeometrySet.get(Index index) {
  return this.geometries[index];
}

/// sets a geometry by index
inline GeometrySet.set!(Index index, Geometry value) {
  this.geometries[index] = value;
  this.version++;
}

/// adds a geometry
inline GeometrySet.add!(Geometry value) {
  this.geometries.push(value);
  this.version++;
}


inline UInt32 GeometrySet.getAttributeGeneration(String attributeName) {
  return this.attributeGenerations.get(attributeName, 0);
}

inline GeometrySet.setAttributeGeneration!(String attributeName, UInt32 gen) {
  this.attributeGenerations[attributeName] = gen;
}

inline GeometrySet.incrementAttributeGeneration!(String attributeName) {
  UInt32 gen = this.attributeGenerations.get(attributeName, 0);
  this.attributeGenerations[attributeName] = gen+1;
}


/// returns true if the geometry set owns a meta data under the given key
function Boolean GeometrySet.hasMetaData( String name ) {
  return this.metaData.has( name );
}

/// gets a single object out of the container or null if it doesn't exist
function Ref<Object> GeometrySet.getMetaData( String name ) {
  return this.metaData.get( name, null );
}

/// sets a single object in the metadata
function GeometrySet.setMetaData!( String name, Object value ) {
  this.metaData[name] = value;
  this.version++;
}
/// sets a single object in the metadata
function UInt32 GeometrySet.getVersion() {
  return this.version;
}

/// Generates a Description string of this geom set.
/// \param indent The indentation to use when generating the string. 
function String GeometrySet.getDesc(String indent, Boolean includeGeometryTolopology) {
  String desc;
  desc += indent + "{ \n";
  desc += indent + "  geometries:[ \n";
  for(Integer i=0; i<this.size(); i++){
    desc += indent + "    " + getGeomDebugName(this.get(i)) + ":{\n";
    
    if(includeGeometryTolopology){
      desc += indent + "      " + this.get(i).getDesc(false, false);
    }
    desc += indent + "    },\n";
  }
  desc += indent + "  ]\n";

  desc += indent + "  attributeGenerations:{ \n";
  for(key, value in this.attributeGenerations){
    desc += indent+'    ' + key + ":" + value + ",\n";
  }
  desc += indent + "  },\n";
  desc += indent + "}";
  return desc;
}

/// Generates a Description string of this stack.
function String GeometrySet.getDesc() {
  return this.getDesc("", false);
}
