/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;


//////////////////////////////////////
// Factory definition.

object PushModifierFactory : GeometryOperatorFactory {
};

function GeometryOperator PushModifierFactory.constructGeometryOperator(){
  PushModifier geomOp();
  return geomOp;
}


//////////////////////////////////////
//

object PushModifier : BaseModifier {
  Scalar push;
};

function PushModifier(){
  this.push = 1.0;
}

function PushModifier(Scalar push){
  this.push = push;
}


function UInt32[String] PushModifier.getAttributeInteractions(){
  UInt32 result[String];
  result['positions'] = AttrMode_ReadWrite;
  result['normals'] = AttrMode_Read;
  return result;
}

function PushModifier.setPushDist!(Scalar push){
  this.push = push;
  String data;
  this.notify('changed', data);
}


/// The per-point operator that computes the push of the vertices. 
/// \internal
operator pushModifier_pushPositionsAlongNormals<<<index>>>(
  io Vec3 positions[],
  Vec3 normals[],
  Scalar push
){
  positions[index] += normals[index] * push;
}

/// Per-geometry computation of the push. 
/// \internal
operator pushModifier_deformGeometries<<<index>>>(
  io GeometrySet geomSet,
  Scalar push
){
  Ref<GeometryAttributes> attributes = geomSet.get(index).getAttributes();
  Vec3Attribute positionsAttribute = attributes.positionsAttribute;
  Vec3Attribute normalsAttribute = attributes.normalsAttribute;
  if(!positionsAttribute || !normalsAttribute){
    setError("Error in pushModifier_deformGeometries. Missing attributes.");
  }
  pushModifier_pushPositionsAlongNormals<<<attributes.size()>>>(
    positionsAttribute.values,
    normalsAttribute.values,
    push
  );
  positionsAttribute.incrementVersion();
}

function PushModifier.evaluate!(EvalContext context, io GeometrySet geomSet){
  AutoProfilingEvent p(FUNC);
  pushModifier_deformGeometries<<<geomSet.size()>>>(geomSet, this.push);
}


